from pathlib import Path
import json
import os
import subprocess
import time
import webbrowser

# 定义支持的URL
uegee_url = "https://uegee.com/"
cngov_url = "https://www.gov.cn/"




# 开发者模式
def rootMode():
    print('输入开发者账号&密码')
    print('-----------------')
    root_login_account = input('账号: ')
    root_login_paswd = input('密码: ')
    if root_login_account == 'uegee':
        if root_login_paswd == 'company':
            print('认证成功！欢迎！'+root_login_account)
            print('准备进入开发者模式。')
            time.sleep(1)
            while 1>0:
                command = input('<command>: ')
                if command == "exit":
                    exit()
                elif command == '':
                    command = ''
                elif command == "dm-v":
                    print('Version: v2.2')
                else:
                    print('command not found!')
        else:
            print('密码不正确')
    else:
        print('账号不正确')




# 菜单模块
def menu():
    print('\n--------------------------------------\n')
    time.sleep(0.05)
    print('功能列表：\n输入对应代码进入')
    time.sleep(0.05)

    print('[1]: 拼接 模式1 (头部+主视频)      |      [2]: 拼接 模式2（头+主视频1+主视频2)')
    time.sleep(0.05)

    print('[3]: 重命名 顺序批量重命名         |      [4]: 5秒视频切割)')
    time.sleep(0.05)

    print('[5]: 标题随机乱序                  |      [6]: 视频音频分贝拉升\n')
    time.sleep(0.05)

    print('[0]: 退出软件(exit)                |      [999]: 开发者模式(Deploy Modes.)')
    time.sleep(0.05)

    user_code_input = input('操作指令(回车执行): ')
    if user_code_input == '1':
        os.system('cls' if os.name == 'nt' else 'clear')
        print('即将进入 【拼接 模式1】')
        time.sleep(1)
        os.system('start cmd.exe /K "combo.exe"')
        input('窗口已拉起并弹出；按任意键退出此程序')
    elif user_code_input == '2':
        os.system('cls' if os.name == 'nt' else 'clear')
        print('即将进入 【拼接 模式2】')
        time.sleep(1)
        os.system('start cmd.exe /K "combo_double.exe"')
        input('窗口已拉起并弹出；按任意键退出此程序')

    elif user_code_input == '3':
        print('还没做。')
    elif user_code_input == '4':
        os.system('cls' if os.name == 'nt' else 'clear')
        print('即将进入 【5秒视频切割】')
        time.sleep(1)
        os.system('start cmd.exe /K "5scut.exe"')
        input('窗口已拉起并弹出；按任意键退出此程序')
    elif user_code_input == '5':
        os.system('cls' if os.name == 'nt' else 'clear')
        print('即将进入 【拼接 标题随机乱序】')
        time.sleep(1)
        os.system('start cmd.exe /K "title_random.exe"')
        input('窗口已拉起并弹出；按任意键退出此程序')
    elif user_code_input == '6':
        os.system('cls' if os.name == 'nt' else 'clear')
        print('即将进入 【视频音频分贝拉升】')
        time.sleep(1)
        os.system('start cmd.exe /K "sound_up.exe"')
        input('窗口已拉起并弹出；按任意键退出此程序')
    elif user_code_input == '999':
        rootMode()
    elif user_code_input == '0':
        code_niubi_chu = 0
        while code_niubi_chu < 20:
            print('\n')
            time.sleep(0.03)
            code_niubi_chu += 1

        print(r'    ____             ____           ')
        print(r'   / __ )__  _____  / __ )__  _____ ')
        print(r'  / __  / / / / _ \/ __  / / / / _ \\')
        print(r' / /_/ / /_/ /  __/ /_/ / /_/ /  __/')
        print(r'/_____/\__, /\___/_____/\__, /\___/ ')
        print(r'      /____/           /____/       ')
        print('下次见！尊贵的【国家级G8大会员 / 中华人民共和国中央人民政府中央政治局特别版-军政企业版 赤红国宾钻石永久卡】')
        print('\n')
        code_niubi_chu = 0
        while code_niubi_chu < 5:
            print('\n')
            time.sleep(0.03)
            code_niubi_chu += 1
        time.sleep(5)
        exit()
    else:
        print('输入错误，请重新输入。')
        menu()


# 一串无意义的装B代码
os.system('title 启')
os.system('color 08')
print('Core：软件启动中………………')
time.sleep(0.5)
print('Core：清理缓存...')
time.sleep(1)
print('Core：缓存清理完成')
print('Core：重构框架...')
time.sleep(3)
print('Core：重构框架已完成')
print('Core：处理依赖链...')
time.sleep(0.1)
print('Core：处理依赖链已完成')
print('Core：数据库链接...')
time.sleep(0.5)
print('Core：数据库链接已完成')
print('Core：拼接模块载入...')
time.sleep(0.2)
print('Core：拼接模块载入已完成')
print('Core：链接服务器...')
time.sleep(0.1)
os.system('title 启动')
print('Core：链接模块已完成')
print('Core：传输密钥...')
time.sleep(2)
print('Core：验证密钥，计算哈希值...')
time.sleep(0.4)
print('Core：拼接脚本代码合成准备...')
time.sleep(0.1)
print('Core：重写代码...')

os.system('color 02')
time.sleep(0.005)
print(' /* ')
time.sleep(0.005)
print('     FIGlet.js (a FIGDriver for FIGlet fonts) ')
time.sleep(0.005)
print('     By Patrick Gillespie (patorjk@gmail.com) ')
time.sleep(0.005)
print('     Originally Written For: http://patorjk.com/software/taag/ ')
time.sleep(0.005)
print('     License: MIT (with this header staying intact) ')
time.sleep(0.005)
print('      ')
time.sleep(0.005)
print('     This JavaScript code aims to fully implement the FIGlet spec. ')
time.sleep(0.005)
print('     Full FIGlet spec: http://patorjk.com/software/taag/docs/figfont.txt ')
time.sleep(0.005)
print('      ')
time.sleep(0.005)
print('     If you use this for a public app, a link back to TAAG is appreciated   ')
time.sleep(0.005)
print('     but not necessary. ')
time.sleep(0.005)
print(' */ ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print(' "use strict"; ')
time.sleep(0.005)
os.system('title 启动中')
print('  ')
time.sleep(0.005)
print(' var Figlet = Figlet || (function() { ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print('     // --------------------------------------------------------------------- ')
time.sleep(0.005)
print('     // private static variables ')
time.sleep(0.005)
print('     var FULL_WIDTH = 0, ')
time.sleep(0.005)
print('         FITTING = 1, ')
time.sleep(0.005)
print('         SMUSHING = 2, ')
time.sleep(0.005)
print('         CONTROLLED_SMUSHING = 3; ')
time.sleep(0.005)
print('      ')
time.sleep(0.005)
print('     // --------------------------------------------------------------------- ')
time.sleep(0.005)
print('     // private static methods ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print('     /* ')
time.sleep(0.005)
print('         This method takes in the oldLay and newLayout data from the FIGfont header file and returns ')
time.sleep(0.005)
print('         the layout information. ')
time.sleep(0.005)
print('     */ ')
time.sleep(0.005)
print('     function getSmushingRules(oldLayout, newLayout) { ')
time.sleep(0.005)
print('         var rules = {}; ')
time.sleep(0.005)
print('         var val, index, len, code; ')
time.sleep(0.005)
print('         var codes = [[16384,"vLayout",SMUSHING], [8192,"vLayout",FITTING], [4096, "vRule5", true], [2048, "vRule4", true], ')
time.sleep(0.005)
print('                      [1024, "vRule3", true], [512, "vRule2", true], [256, "vRule1", true], [128, "hLayout", SMUSHING], ')
time.sleep(0.005)
print('                      [64, "hLayout", FITTING], [32, "hRule6", true], [16, "hRule5", true], [8, "hRule4", true], [4, "hRule3", true], ')
time.sleep(0.005)
print('                      [2, "hRule2", true], [1, "hRule1", true]];  ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print('         val = (newLayout !== null) ? newLayout : oldLayout; ')
time.sleep(0.005)
print('         index = 0; ')
time.sleep(0.005)
os.system('title 启')
print('         len = codes.length; ')
time.sleep(0.005)
print('         while ( index < len ) { ')
time.sleep(0.005)
print('             code = codes[index]; ')
time.sleep(0.005)
print('             if (val >= code[0]) { ')
time.sleep(0.005)
print('                 val = val - code[0]; ')
time.sleep(0.005)
print('                 rules[code[1]] = (typeof rules[code[1]] === "undefined") ? code[2] : rules[code[1]]; ')
time.sleep(0.005)
print('             } else if (code[1] !== "vLayout" && code[1] !== "hLayout") { ')
time.sleep(0.005)
print('                 rules[code[1]] = false; ')
time.sleep(0.005)
print('             } ')
time.sleep(0.005)
print('             index++; ')
time.sleep(0.005)
print('         } ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print('         if (typeof rules["hLayout"] === "undefined") { ')
time.sleep(0.005)
print('             if (oldLayout === 0) { ')
time.sleep(0.005)
print('                 rules["hLayout"] = FITTING; ')
time.sleep(0.005)
print('             } else if (oldLayout === -1) { ')
time.sleep(0.005)
print('                 rules["hLayout"] = FULL_WIDTH; ')
time.sleep(0.005)
print('             } else { ')
time.sleep(0.005)
print('                 if (rules["hRule1"] || rules["hRule2"] || rules["hRule3"] || rules["hRule4"] ||rules["hRule5"] || rules["hRule6"] ) { ')
time.sleep(0.005)
print('                     rules["hLayout"] = CONTROLLED_SMUSHING; ')
time.sleep(0.005)
print('                 } else { ')
time.sleep(0.005)
print('                     rules["hLayout"] = SMUSHING; ')
time.sleep(0.005)
os.system('title 启动')
print('                 } ')
time.sleep(0.005)
print('             } ')
time.sleep(0.005)
print('         } else if (rules["hLayout"] === SMUSHING) { ')
time.sleep(0.005)
print('             if (rules["hRule1"] || rules["hRule2"] || rules["hRule3"] || rules["hRule4"] ||rules["hRule5"] || rules["hRule6"] ) { ')
time.sleep(0.005)
print('                 rules["hLayout"] = CONTROLLED_SMUSHING; ')
time.sleep(0.005)
print('             } ')
time.sleep(0.005)
print('         } ')
time.sleep(0.005)
print('          ')
time.sleep(0.005)
print('         if (typeof rules["vLayout"] === "undefined") { ')
time.sleep(0.005)
print('             if (rules["vRule1"] || rules["vRule2"] || rules["vRule3"] || rules["vRule4"] ||rules["vRule5"]  ) { ')
time.sleep(0.005)
print('                 rules["vLayout"] = CONTROLLED_SMUSHING; ')
time.sleep(0.005)
print('             } else { ')
time.sleep(0.005)
print('                 rules["vLayout"] = FULL_WIDTH; ')
time.sleep(0.005)
print('             } ')
time.sleep(0.005)
print('         } else if (rules["vLayout"] === SMUSHING) { ')
time.sleep(0.005)
print('             if (rules["vRule1"] || rules["vRule2"] || rules["vRule3"] || rules["vRule4"] ||rules["vRule5"]  ) { ')
time.sleep(0.005)
print('                 rules["vLayout"] = CONTROLLED_SMUSHING; ')
time.sleep(0.005)
print('             } ')
time.sleep(0.005)
print('         } ')
time.sleep(0.005)
print('          ')
time.sleep(0.005)
print('         return rules;    ')
time.sleep(0.005)
print('     } ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print('     /* The [vh]Rule[1-6]_Smush functions return the smushed character OR false if the two characters can\'t be smushed */ ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print('     /* ')
time.sleep(0.005)
print('         Rule 1: EQUAL CHARACTER SMUSHING (code value 1) ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print('             Two sub-characters are smushed into a single sub-character ')
time.sleep(0.005)
print('             if they are the same.  This rule does not smush ')
time.sleep(0.005)
print('             hardblanks.  (See rule 6 on hardblanks below) ')
time.sleep(0.005)
print('     */ ')
os.system('title 启动中')
time.sleep(0.005)
print('     function hRule1_Smush(ch1, ch2, hardBlank) { ')
time.sleep(0.005)
print('         if (ch1 === ch2 && ch1 !== hardBlank) {return ch1;} ')
time.sleep(0.005)
print('         return false; ')
time.sleep(0.005)
print('     } ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print('     /* ')
time.sleep(0.005)
print('         Rule 2: UNDERSCORE SMUSHING (code value 2) ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print('             An underscore ("_") will be replaced by any of: "|", "/", ')
time.sleep(0.005)
print('             "\", "[", "]", "{", "}", "(", ")", "<" or ">". ')
time.sleep(0.005)
print('     */ ')
time.sleep(0.005)
print('     function hRule2_Smush(ch1, ch2) { ')
time.sleep(0.005)
print('         var rule2Str = "|/\\[]{}()<>"; ')
time.sleep(0.005)
print('         if (ch1 === "_") { ')
time.sleep(0.005)
print('             if (rule2Str.indexOf(ch2) !== -1) {return ch2;} ')
time.sleep(0.005)
print('         } else if (ch2 === "_") { ')
time.sleep(0.005)
print('             if (rule2Str.indexOf(ch1) !== -1) {return ch1;} ')
time.sleep(0.005)
print('         } ')
time.sleep(0.005)
print('         return false; ')
time.sleep(0.005)
print('     } ')
time.sleep(0.005)
print('      ')
time.sleep(0.005)
print('     /* ')
time.sleep(0.005)
print('         Rule 3: HIERARCHY SMUSHING (code value 4) ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print('             A hierarchy of six classes is used: "|", "/\", "[]", "{}", ')
time.sleep(0.005)
print('             "()", and "<>".  When two smushing sub-characters are ')
time.sleep(0.005)
print('             from different classes, the one from the latter class ')
time.sleep(0.005)
print('             will be used. ')
time.sleep(0.005)
print('     */ ')
time.sleep(0.005)
print('     function hRule3_Smush(ch1, ch2) { ')
time.sleep(0.005)
print('         var rule3Classes = "| /\\ [] {} () <>"; ')
time.sleep(0.005)
print('         var r3_pos1 = rule3Classes.indexOf(ch1); ')
time.sleep(0.005)
print('         var r3_pos2 = rule3Classes.indexOf(ch2); ')
time.sleep(0.005)
os.system('title 启')
print('         if (r3_pos1 !== -1 && r3_pos2 !== -1) { ')
time.sleep(0.005)
print('             if (r3_pos1 !== r3_pos2 && Math.abs(r3_pos1-r3_pos2) !== 1) { ')
time.sleep(0.005)
print('                 return rule3Classes.substr(Math.max(r3_pos1,r3_pos2), 1); ')
time.sleep(0.005)
print('             } ')
time.sleep(0.005)
print('         } ')
time.sleep(0.005)
print('         return false; ')
time.sleep(0.005)
print('     } ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print('     /* ')
time.sleep(0.005)
print('         Rule 4: OPPOSITE PAIR SMUSHING (code value 8) ')
time.sleep(0.005)
print('  ')
time.sleep(0.005)
print('             Smushes opposing brackets ("[]" or "]["), braces ("{}" or ')
time.sleep(0.005)
print('             "}{") and parentheses ("()" or ")(") together, replacing ')
time.sleep(0.005)
print('             any such pair with a vertical bar ("|"). ')
time.sleep(0.005)
print('     */ ')
time.sleep(0.005)
print('                 figChars.numChars++; ')
time.sleep(0.005)
print('             } ')
time.sleep(0.005)
print('              ')
time.sleep(0.005)
print('             isFontLoaded = true; ')
time.sleep(0.005)
print('         }; ')
time.sleep(0.005)
print('          ')
time.sleep(0.005)
print('         me.getComment = function() { ')
time.sleep(0.005)
print('             return comment;    ')
os.system('title 启动')
time.sleep(0.005)
print('         }; ')
time.sleep(0.005)
print('          ')
time.sleep(0.005)
print('         me.getText = function(txt) { ')
time.sleep(0.005)
print('             txt = txt.replace(/\r\n/g,"\n").replace(/\r/g,"\n"); ')
time.sleep(0.005)
print('             var lines = txt.split("\n"); ')
time.sleep(0.005)
print('             var figLines = []; ')
time.sleep(0.01)
print('             var ii, len, output; ')
time.sleep(0.1)
print('             len = lines.length; ')
time.sleep(0.1)
print('             for (ii = 0; ii < len; ii++) { ')
time.sleep(0.1)
print('                 figLines.push( generateFigTextLine(lines[ii], figChars, opts) ); ')
time.sleep(0.1)
print('             } ')
time.sleep(0.1)
print('             len = figLines.length; ')
time.sleep(0.1)
print('             output = figLines[0]; ')
time.sleep(0.1)
print('             for (ii = 1; ii < len; ii++) { ')
time.sleep(0.1)
print('                 output = smushVerticalFigLines(output, figLines[ii], opts); ')
time.sleep(0.1)
print('             } ')
time.sleep(0.1)
print('              ')
time.sleep(0.1)
print('             return output.join("\n"); ')
time.sleep(0.1)
print('         }; ')
time.sleep(0.1)
os.system('title 启动中')
print('     }; ')
time.sleep(1)
print(' })(); ')


code_niubi_chu = 0
while code_niubi_chu < 20:
    print('\n')
    time.sleep(0.03)
    code_niubi_chu += 1


time.sleep(1)


os.system('cls' if os.name == 'nt' else 'clear')



heikuang = 1
os.system('color 0b')
os.system('title 载入基本工具')
while heikuang < 50:
    hei = "◼"
    os.system('cls' if os.name == 'nt' else 'clear')
    print(hei * heikuang + "\n载入基本工具 Loading FFMPEG......")
    time.sleep(0.05)
    heikuang += 1

time.sleep(0.5)
os.system('cls' if os.name == 'nt' else 'clear')

os.system('color 0F')
os.system('title DickMedia v2.0')

print('--------------------------------------')
print('  _____  _ _          __  __          _ _       ')
time.sleep(0.05)
print(r' |  __ \(_| |        |  \/  |        | (_)      ')       # 使用原始字符串
time.sleep(0.05)
print(r' | |  | |_| | _____  | \  / | ___  __| |_  __ _ ')     # 使用原始字符串
time.sleep(0.05)
print(r' | |  | | | |/ / _ \ | |\/| |/ _ \/ _` | |/ _` |')    # 使用原始字符串
time.sleep(0.05)
print(' | |__| | |   |  __/ | |  | |  __| (_| | | (_| |')
time.sleep(0.05)
print(r' |_____/|_|_|\_\___| |_|  |_|\___|\__,_|_|\__,_|')     # 使用原始字符串
time.sleep(0.05)


print('               v2.2.0 黄金加强终极全家桶赛博开光豪华终身区块链哈希指针国际牛B克拉斯企业版')
print('               DickCore: 2.2.0154 Releases: 2.2.0 Bash: main')
print('--------------------------------------')
file_path = Path("./key.json")
try:
    data = json.loads(file_path.read_text(encoding="utf-8"))
    if(data['key']) == 'DickKey-5b2c435d33efd15030306e711771b82d':
        time.sleep(0.5)
        print(' _    __________ ')
        print('| |  / /  _/ __ \\')
        print('| | / // // /_/ /')
        print('| |/ _/ // ____/ ')
        print('|___/___/_/ 尊贵的 【国家级G8大会员 / 中华人民共和国中央人民政府中央政治局特别版-军政企业版 赤红国宾钻石永久卡】欢迎。 ')
        print('                 ')
        print('卡号ID：国 家 秘 密    卡密: DickKey-******************')
        time.sleep(0.05)
        print('密钥到期时间：????-??-?? ??:??:?? ETC+8')
        time.sleep(3)
        webbrowser.open(cngov_url)
        menu()
    else:
        print('密钥已过期。')
        input()
except FileNotFoundError:
    print(f"错误：软件密钥不存在")
    input()
except json.JSONDecodeError:
    print("错误：非法的密钥")
    input()